id: 1
name: "HTML + JavaScript + Tailwind CSS"
description: "Complete modern frontend development stack using HTML5 semantic markup, ES2022 JavaScript with modules, Tailwind CSS for utility-first styling, Vite for build tooling, TypeScript for type safety, and comprehensive testing and quality tools including Jest, Playwright, ESLint, and Prettier."
category: Frontend

technologies:
  core:
    - name: HTML5
      version: "5.0"
      category: Language
    - name: JavaScript
      version: ES2022
      category: Language
    - name: CSS3
      version: "3.0"
      category: Language
    - name: TypeScript
      version: "5.3.0"
      category: Language
    - name: Tailwind CSS
      version: "3.4.0"
      category: Framework
  
  build_tools:
    - name: Vite
      version: "5.0.0"
    - name: PostCSS
      version: "8.4.0"
    - name: Autoprefixer
      version: "10.4.0"
    - name: TypeScript Compiler
      version: "5.3.0"
  
  testing:
    - name: Jest
      version: "29.7.0"
      type: Unit
    - name: Playwright
      version: "1.40.0"
      type: E2E
    - name: Testing Library
      version: "14.0.0"
      type: Unit
  
  quality:
    - name: ESLint
      version: "8.57.0"
    - name: Prettier
      version: "3.2.0"
    - name: TypeScript ESLint
      version: "6.0.0"
    - name: Husky
      version: "8.0.0"
    - name: lint-staged
      version: "15.0.0"

setup:
  prerequisites:
    - "Node.js 18.0.0 or higher"
    - "npm 9.0.0 or higher"
    - "Git"
    - "Modern web browser"
  
  installation:
    - "npm create vite@latest my-project -- --template vanilla-ts"
    - "cd my-project"
    - "npm install"
    - "npm install -D tailwindcss postcss autoprefixer"
    - "npm install -D typescript @types/node"
    - "npm install -D @typescript-eslint/parser @typescript-eslint/eslint-plugin"
    - "npm install -D prettier eslint-config-prettier"
    - "npm install -D jest @types/jest ts-jest"
    - "npm install -D @playwright/test"
    - "npm install -D @testing-library/jest-dom"
    - "npm install -D husky lint-staged"
    - "npx tailwindcss init -p"
    - "npx playwright install"
    - "npx husky install"
    - "npx husky add .husky/pre-commit 'npx lint-staged'"
  
  configuration:
    - filename: tailwind.config.js
      content: |
        /** @type {import('tailwindcss').Config} */
        module.exports = {
          content: [
            './index.html',
            './src/**/*.{js,ts,jsx,tsx}',
          ],
          theme: {
            extend: {
              colors: {
                primary: {
                  50: '#eff6ff',
                  500: '#3b82f6',
                  900: '#1e3a8a',
                }
              },
              fontFamily: {
                sans: ['Inter', 'system-ui', 'sans-serif'],
              }
            },
          },
          plugins: [],
        }
      description: "Tailwind CSS configuration with custom theme"
    
    - filename: vite.config.ts
      content: |
        import { defineConfig } from 'vite'
        
        export default defineConfig({
          plugins: [],
          build: {
            outDir: 'dist',
            sourcemap: true,
          },
          server: {
            port: 3000,
            open: true,
          },
        })
      description: "Vite build configuration with TypeScript"
    
    - filename: tsconfig.json
      content: |
        {
          "compilerOptions": {
            "target": "ES2020",
            "useDefineForClassFields": true,
            "lib": ["ES2020", "DOM", "DOM.Iterable"],
            "module": "ESNext",
            "skipLibCheck": true,
            "moduleResolution": "bundler",
            "allowImportingTsExtensions": true,
            "resolveJsonModule": true,
            "isolatedModules": true,
            "noEmit": true,
            "jsx": "preserve",
            "strict": true,
            "noUnusedLocals": true,
            "noUnusedParameters": true,
            "noFallthroughCasesInSwitch": true
          },
          "include": ["src"],
          "references": [{ "path": "./tsconfig.node.json" }]
        }
      description: "TypeScript configuration"
    
    - filename: .eslintrc.js
      content: |
        module.exports = {
          root: true,
          env: {
            browser: true,
            es2020: true,
            node: true,
          },
          extends: [
            'eslint:recommended',
            '@typescript-eslint/recommended',
            'prettier'
          ],
          parser: '@typescript-eslint/parser',
          parserOptions: {
            ecmaVersion: 'latest',
            sourceType: 'module',
          },
          plugins: ['@typescript-eslint'],
          rules: {
            '@typescript-eslint/no-unused-vars': 'error',
            '@typescript-eslint/no-explicit-any': 'warn',
          },
        }
      description: "ESLint configuration with TypeScript support"
    
    - filename: .prettierrc
      content: |
        {
          "semi": true,
          "trailingComma": "es5",
          "singleQuote": true,
          "printWidth": 80,
          "tabWidth": 2,
          "useTabs": false
        }
      description: "Prettier configuration"
    
    - filename: jest.config.js
      content: |
        module.exports = {
          preset: 'ts-jest',
          testEnvironment: 'jsdom',
          setupFilesAfterEnv: ['<rootDir>/src/setupTests.ts'],
          moduleNameMapping: {
            '^@/(.*)$': '<rootDir>/src/$1',
          },
          collectCoverageFrom: [
            'src/**/*.{js,ts,jsx,tsx}',
            '!src/**/*.d.ts',
          ],
        }
      description: "Jest configuration for TypeScript"
    
    - filename: playwright.config.ts
      content: |
        import { defineConfig, devices } from '@playwright/test';
        
        export default defineConfig({
          testDir: './tests',
          fullyParallel: true,
          forbidOnly: !!process.env.CI,
          retries: process.env.CI ? 2 : 0,
          workers: process.env.CI ? 1 : undefined,
          reporter: 'html',
          use: {
            baseURL: 'http://localhost:3000',
            trace: 'on-first-retry',
          },
          projects: [
            {
              name: 'chromium',
              use: { ...devices['Desktop Chrome'] },
            },
            {
              name: 'firefox',
              use: { ...devices['Desktop Firefox'] },
            },
            {
              name: 'webkit',
              use: { ...devices['Desktop Safari'] },
            },
          ],
          webServer: {
            command: 'npm run dev',
            url: 'http://localhost:3000',
            reuseExistingServer: !process.env.CI,
          },
        });
      description: "Playwright configuration for E2E testing"
    
    - filename: lint-staged.config.js
      content: |
        module.exports = {
          '*.{js,ts,jsx,tsx}': [
            'eslint --fix',
            'prettier --write',
          ],
          '*.{css,scss,md,json}': [
            'prettier --write',
          ],
        }
      description: "lint-staged configuration for pre-commit hooks"

use_cases:
  - "Static websites"
  - "Landing pages"
  - "Portfolios"
  - "Rapid prototyping"
  - "Component libraries"
  - "Single Page Applications"
  - "Progressive Web Apps"
  - "Design systems"

tags:
  - html5
  - javascript
  - es2022
  - typescript
  - tailwind
  - css
  - vite
  - postcss
  - jest
  - playwright
  - eslint
  - prettier
  - frontend
  - responsive
  - utility-first
  - modern

documentation:
  official: "https://tailwindcss.com/docs"
  github: "https://github.com/tailwindlabs/tailwindcss"
  npm: "https://www.npmjs.com/package/tailwindcss"
  vite: "https://vitejs.dev/guide/"
  typescript: "https://www.typescriptlang.org/docs/"

contributor:
  name: Rivercode
  email: expert@promptwebgen.com

metadata:
  rating: 4.8
  review_count: 15
  download_count: 1250
  is_paid: false
  marketplace_price: 0
  license: "MIT"
  status: "Active"

timestamps:
  created_at: "2024-01-01T09:00:00Z"
  updated_at: "2024-01-15T16:45:00Z"
